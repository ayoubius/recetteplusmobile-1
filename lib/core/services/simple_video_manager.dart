import 'package:flutter/foundation.dart';
import 'package:video_player/video_player.dart';
import 'dart:async';

class SimpleVideoManager {
  static final SimpleVideoManager _instance = SimpleVideoManager._internal();
  factory SimpleVideoManager() => _instance;
  SimpleVideoManager._internal();

  final Map<String, VideoPlayerController> _controllers = {};
  final Map<String, bool> _isInitialized = {};
  final Set<String> _isLoading = {};
  String? _currentPlayingId;

  // Callbacks pour les changements d'√©tat
  final List<VoidCallback> _onPauseCallbacks = [];

  // Ajouter un callback pour les pauses automatiques
  void addOnPauseCallback(VoidCallback callback) {
    _onPauseCallbacks.add(callback);
  }

  void removeOnPauseCallback(VoidCallback callback) {
    _onPauseCallbacks.remove(callback);
  }

  // Initialiser une vid√©o
  Future<VideoPlayerController?> initializeVideo(String videoId, String videoUrl) async {
    if (_controllers.containsKey(videoId)) {
      return _controllers[videoId];
    }

    if (_isLoading.contains(videoId)) {
      return null;
    }

    _isLoading.add(videoId);

    try {
      final controller = VideoPlayerController.networkUrl(Uri.parse(videoUrl));
      _controllers[videoId] = controller;

      await controller.initialize();
      _isInitialized[videoId] = true;
      
      // Configuration par d√©faut
      controller.setLooping(true);
      controller.setVolume(1.0);

      if (kDebugMode) {
        print('‚úÖ Vid√©o initialis√©e: $videoId');
      }

      return controller;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur initialisation vid√©o $videoId: $e');
      }
      _controllers.remove(videoId);
      return null;
    } finally {
      _isLoading.remove(videoId);
    }
  }

  // Jouer une vid√©o (et arr√™ter les autres)
  Future<void> playVideo(String videoId) async {
    // Arr√™ter la vid√©o actuellement en cours
    if (_currentPlayingId != null && _currentPlayingId != videoId) {
      await pauseVideo(_currentPlayingId!);
    }

    final controller = _controllers[videoId];
    if (controller != null && _isInitialized[videoId] == true) {
      await controller.play();
      _currentPlayingId = videoId;
      
      if (kDebugMode) {
        print('‚ñ∂Ô∏è Lecture: $videoId');
      }
    }
  }

  // Mettre en pause une vid√©o
  Future<void> pauseVideo(String videoId) async {
    final controller = _controllers[videoId];
    if (controller != null && _isInitialized[videoId] == true) {
      await controller.pause();
      
      if (_currentPlayingId == videoId) {
        _currentPlayingId = null;
      }
      
      if (kDebugMode) {
        print('‚è∏Ô∏è Pause: $videoId');
      }
    }
  }

  // Arr√™ter toutes les vid√©os (appel√© lors des changements de page)
  Future<void> pauseAll() async {
    for (final entry in _controllers.entries) {
      if (_isInitialized[entry.key] == true) {
        await entry.value.pause();
      }
    }
    _currentPlayingId = null;
    
    // Notifier les callbacks
    for (final callback in _onPauseCallbacks) {
      callback();
    }
    
    if (kDebugMode) {
      print('‚è∏Ô∏è Toutes les vid√©os mises en pause');
    }
  }

  // Obtenir un contr√¥leur
  VideoPlayerController? getController(String videoId) {
    return _controllers[videoId];
  }

  // V√©rifier si une vid√©o est initialis√©e
  bool isInitialized(String videoId) {
    return _isInitialized[videoId] == true;
  }

  // V√©rifier si une vid√©o est en cours de chargement
  bool isLoading(String videoId) {
    return _isLoading.contains(videoId);
  }

  // V√©rifier si une vid√©o est en cours de lecture
  bool isPlaying(String videoId) {
    final controller = _controllers[videoId];
    return controller?.value.isPlaying == true;
  }

  // Obtenir la vid√©o actuellement en lecture
  String? get currentPlayingId => _currentPlayingId;

  // Nettoyer une vid√©o
  void disposeVideo(String videoId) {
    final controller = _controllers[videoId];
    if (controller != null) {
      controller.dispose();
      _controllers.remove(videoId);
      _isInitialized.remove(videoId);
      _isLoading.remove(videoId);
      
      if (_currentPlayingId == videoId) {
        _currentPlayingId = null;
      }
      
      if (kDebugMode) {
        print('üóëÔ∏è Vid√©o supprim√©e: $videoId');
      }
    }
  }

  // Nettoyer toutes les vid√©os
  void disposeAll() {
    for (final controller in _controllers.values) {
      controller.dispose();
    }
    _controllers.clear();
    _isInitialized.clear();
    _isLoading.clear();
    _currentPlayingId = null;
    _onPauseCallbacks.clear();
    
    if (kDebugMode) {
      print('üóëÔ∏è Toutes les vid√©os supprim√©es');
    }
  }

  // Obtenir la position actuelle
  Duration getPosition(String videoId) {
    final controller = _controllers[videoId];
    return controller?.value.position ?? Duration.zero;
  }

  // Obtenir la dur√©e totale
  Duration getDuration(String videoId) {
    final controller = _controllers[videoId];
    return controller?.value.duration ?? Duration.zero;
  }

  // Chercher √† une position sp√©cifique
  Future<void> seekTo(String videoId, Duration position) async {
    final controller = _controllers[videoId];
    if (controller != null && _isInitialized[videoId] == true) {
      await controller.seekTo(position);
      
      if (kDebugMode) {
        print('‚è≠Ô∏è Seek $videoId √† ${position.inSeconds}s');
      }
    }
  }
}
