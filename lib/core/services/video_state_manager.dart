import 'package:flutter/foundation.dart';
import 'package:video_player/video_player.dart';

class VideoStateManager {
  final Map<String, VideoPlayerController> _controllers = {};
  final Map<String, bool> _initializedControllers = {};

  // Initialiser un contr√¥leur vid√©o
  Future<VideoPlayerController> initializeController(String videoId, String videoUrl) async {
    try {
      // Si le contr√¥leur existe d√©j√†, le retourner
      if (_controllers.containsKey(videoId) && _initializedControllers[videoId] == true) {
        return _controllers[videoId]!;
      }

      // Cr√©er un nouveau contr√¥leur
      final controller = VideoPlayerController.networkUrl(Uri.parse(videoUrl));
      _controllers[videoId] = controller;

      // Initialiser le contr√¥leur
      await controller.initialize();
      _initializedControllers[videoId] = true;

      if (kDebugMode) {
        print('‚úÖ Contr√¥leur vid√©o initialis√© pour: $videoId');
      }

      return controller;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de l\'initialisation du contr√¥leur vid√©o: $e');
      }
      _initializedControllers[videoId] = false;
      rethrow;
    }
  }

  // Obtenir un contr√¥leur existant
  VideoPlayerController? getController(String videoId) {
    return _controllers[videoId];
  }

  // V√©rifier si un contr√¥leur est initialis√©
  bool isControllerInitialized(String videoId) {
    return _initializedControllers[videoId] == true;
  }

  // Jouer une vid√©o
  Future<void> play(String videoId) async {
    try {
      final controller = _controllers[videoId];
      if (controller != null && _initializedControllers[videoId] == true) {
        await controller.play();
        if (kDebugMode) {
          print('‚ñ∂Ô∏è Lecture de la vid√©o: $videoId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la lecture: $e');
      }
    }
  }

  // Mettre en pause une vid√©o
  Future<void> pause(String videoId) async {
    try {
      final controller = _controllers[videoId];
      if (controller != null && _initializedControllers[videoId] == true) {
        await controller.pause();
        if (kDebugMode) {
          print('‚è∏Ô∏è Pause de la vid√©o: $videoId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la pause: $e');
      }
    }
  }

  // Mettre en pause toutes les vid√©os sauf une
  Future<void> pauseAllExcept(String activeVideoId) async {
    try {
      for (final entry in _controllers.entries) {
        if (entry.key != activeVideoId && _initializedControllers[entry.key] == true) {
          await entry.value.pause();
        }
      }
      if (kDebugMode) {
        print('‚è∏Ô∏è Pause de toutes les vid√©os sauf: $activeVideoId');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la pause globale: $e');
      }
    }
  }

  // Aller √† une position sp√©cifique
  Future<void> seekTo(String videoId, Duration position) async {
    try {
      final controller = _controllers[videoId];
      if (controller != null && _initializedControllers[videoId] == true) {
        await controller.seekTo(position);
        if (kDebugMode) {
          print('‚è≠Ô∏è Saut √† ${position.inSeconds}s pour la vid√©o: $videoId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors du saut: $e');
      }
    }
  }

  // D√©finir le volume
  Future<void> setVolume(String videoId, double volume) async {
    try {
      final controller = _controllers[videoId];
      if (controller != null && _initializedControllers[videoId] == true) {
        await controller.setVolume(volume.clamp(0.0, 1.0));
        if (kDebugMode) {
          print('üîä Volume d√©fini √† ${(volume * 100).toInt()}% pour la vid√©o: $videoId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors du r√©glage du volume: $e');
      }
    }
  }

  // Nettoyer un contr√¥leur sp√©cifique
  Future<void> disposeController(String videoId) async {
    try {
      final controller = _controllers[videoId];
      if (controller != null) {
        await controller.dispose();
        _controllers.remove(videoId);
        _initializedControllers.remove(videoId);
        if (kDebugMode) {
          print('üóëÔ∏è Contr√¥leur vid√©o nettoy√© pour: $videoId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors du nettoyage du contr√¥leur: $e');
      }
    }
  }

  // Nettoyer tous les contr√¥leurs
  Future<void> disposeAll() async {
    try {
      for (final controller in _controllers.values) {
        await controller.dispose();
      }
      _controllers.clear();
      _initializedControllers.clear();
      if (kDebugMode) {
        print('üóëÔ∏è Tous les contr√¥leurs vid√©o ont √©t√© nettoy√©s');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors du nettoyage global: $e');
      }
    }
  }

  // Obtenir les informations d'une vid√©o
  Map<String, dynamic>? getVideoInfo(String videoId) {
    final controller = _controllers[videoId];
    if (controller != null && _initializedControllers[videoId] == true) {
      return {
        'duration': controller.value.duration,
        'position': controller.value.position,
        'isPlaying': controller.value.isPlaying,
        'isBuffering': controller.value.isBuffering,
        'hasError': controller.value.hasError,
        'aspectRatio': controller.value.aspectRatio,
        'volume': controller.value.volume,
      };
    }
    return null;
  }

  // Obtenir le nombre de contr√¥leurs actifs
  int get activeControllersCount => _controllers.length;

  // Obtenir la liste des IDs de vid√©os actives
  List<String> get activeVideoIds => _controllers.keys.toList();
}
